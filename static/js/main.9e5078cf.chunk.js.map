{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","src","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","sortByOptions","SearchBar","term","location","sortBy","handleSearch","bind","handleTermChange","handleLocationChange","sortByOption","setState","event","searchYelp","preventDefault","target","value","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","placeholder","onChange","href","yelp","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","image_url","address1","categories","title","App","Yelp","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e5078cf.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n    render() {\n        const { business } = this.props;\n        return (\n            <div className=\"Business\">\n                <div className=\"image-container\">\n                    <img src={business.imageSrc} alt='' />\n                </div>\n                <h2>{business.name}</h2>\n                <div className=\"Business-information\">\n                    <div className=\"Business-address\">\n                        <p>{business.address}</p>\n                        <p>{business.city}</p>\n                        <p>{business.state}{business.zipCode}</p>\n                    </div>\n                    <div className=\"Business-reviews\">\n                        <h3>{business.category}</h3>\n                        <h3 className=\"rating\">{business.rating} stars</h3>\n                        <p>{business.reviewCount}</p>\n                    </div>\n                </div>\n            </div>);\n    }\n};\n\nexport default Business;","import React from 'react';\nimport Business from './../Business/Business';\nimport './BusinessList.css';\n\nclass BusinessList extends React.Component {\n    render() {\n        return (\n            <div className=\"BusinessList\">\n                {\n                    this.props.businesses.map((business) => {\n                        return <Business key={business.id} business={business} />;\n                    })\n                }\n            </div>\n        );\n    }\n};\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\n\nconst sortByOptions = {\n    'Best Match': 'best_match',\n    'Highest Rated': 'rating',\n    'Most Reviewed': 'review_count'\n};\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            term: '',\n            location: '',\n            sortBy: 'best_match'\n        };\n        this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewed': 'review_count'\n        };\n        this.handleSearch = this.handleSearch.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n        this.handleLocationChange = this.handleLocationChange.bind(this);\n    }\n\n    getSortByClass(sortByOption) {\n        if (sortByOption === this.state.sortBy) {\n            return 'active';\n        }\n        else {\n            return '';\n        }\n    }\n\n    handleSortByChange(sortByOption) {\n        this.setState({\n            sortBy: sortByOption\n        });\n    }\n\n    handleSearch(event) {\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n        event.preventDefault();\n    }\n\n    handleTermChange(event) {\n        this.setState({ term: event.target.value });\n    }\n\n    handleLocationChange(event) {\n        this.setState({ location: event.target.value });\n    }\n\n    renderSortByOptions() {\n        return Object.keys(sortByOptions).map(sortByOption => {\n            let sortByOptionValue = sortByOptions[sortByOption];\n            return <li key={sortByOptionValue} className={this.getSortByClass(sortByOptionValue)} onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>\n        });\n    }\n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <div className=\"SearchBar-sort-options\">\n                    <ul>\n                        {this.renderSortByOptions()};\n    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <input placeholder=\"Search Businesses\" onChange={this.handleTermChange} />\n                    <input placeholder=\"Where?\" onChange={this.handleLocationChange} />\n                </div>\n                <div className=\"SearchBar-submit\">\n                    <a href='google.com' onClick={this.handleSearch}>Let's Go</a>\n                </div>\n            </div>\n        );\n    };\n\n};\n\nexport default SearchBar;\n","const apiKey = 'bc6iIPIUx5mzGa1-pEi4e6MpuXxN2DnUVcVrA17lf3Y7ZCzQFOJnSHBouAQh7NVxCaoFWiQMelsiQFXGJsbMqggbvNlMjSfAUi78vi5gapC2RLTdLhTQP9g6IGC5XnYx';\nconst yelp = {\n    searchYelp(term, location, sortBy) {\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n            {\n                headers: {\n                    Authorization: `Bearer ${apiKey}`\n                }\n            }).then(response => { return response.json() }).\n            then(jsonResponse => {\n                if (jsonResponse.businesses) {\n                    return jsonResponse.businesses.map(business => {\n                        console.log(business);\n                        return {\n                            id: business.id,\n                            imageSrc: business.image_url,\n                            name: business.name,\n                            address: business.location.address1,\n                            city: business.location.city,\n                            state: business.location.state,\n                            zipCode: business.location.zipCode,\n                            category: business.categories[0].title,\n                            rating: business.rating,\n                            reviewCount: business.reviewCount\n                        }\n                    });\n                }\n            });\n    }\n};\n\nexport default yelp;","import React from 'react';\n// import logo from '../../logo.svg';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport '../SearchBar/SearchBar';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from '../../util/Yelp';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: [],\n    };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  searchYelp(term, location, sortBy) {\n    Yelp.searchYelp(term, location, sortBy).then((businesses) => {\n      this.setState({ businesses: businesses });\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode >\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}